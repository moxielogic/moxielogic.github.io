<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Moxie Blog</title><link href="http://moxielogic.github.io/blog/" rel="alternate"></link><link href="http://moxielogic.github.io/blog/feeds/misc.atom.xml" rel="self"></link><id>http://moxielogic.github.io/blog/</id><updated>2014-11-29T08:55:00-05:00</updated><entry><title>Architecture</title><link href="http://moxielogic.github.io/blog/architecture.html" rel="alternate"></link><updated>2014-11-29T08:55:00-05:00</updated><author><name>admin</name></author><id>tag:moxielogic.github.io/blog,2014-11-29:architecture.html</id><summary type="html">&lt;h1&gt;Overview&lt;/h1&gt;
&lt;h1&gt;Registers&lt;/h1&gt;
&lt;p&gt;Moxie defines 16 32-bit registers as follows:
&lt;div class="fancy"&gt;
&lt;center&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;Register&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$fp&lt;/code&gt;&lt;/td&gt;&lt;td&gt;the frame pointer&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$sp&lt;/code&gt;&lt;/td&gt;&lt;td&gt;the stack pointer&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$r1&lt;/code&gt; through &lt;code&gt;$r13&lt;/code&gt;&lt;/td&gt;&lt;td&gt;general purpose registers&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;/center&gt;
&lt;/div&gt;
In addition, there are a number of special registers whose values are accessible only with the Get Special Register (&lt;code&gt;gsr&lt;/code&gt;) and Set Special Registers (&lt;code&gt;ssr&lt;/code&gt;) instructions.   Some of these registers have special purposes:&lt;/p&gt;
&lt;div class="fancy"&gt;
&lt;center&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;Special Register&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;status regsiter with the following bit values:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;a pointer to the Exception Handler routine (invoked by `swi`, IRQs, Divide by Zero and illegal instructions (`bad`))&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;upon invocation of the Excecption Handler (see above), special register 2 will have one of four values..&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;the `swi` request number (by convention)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;address of the supervisor mode stack on which exceptions are executed&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;return address upon entering the exception handler&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;an optional non-zero pointer to the Device Tree blob describing this device&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;/center&gt;
&lt;/div&gt;

&lt;h1&gt;Instruction Set&lt;/h1&gt;
&lt;p&gt;The moxie instruction set and encoding is evolving.  Here's the
current list of instructions and encodings supported in by the moxie
toolchain.&lt;/p&gt;
&lt;p&gt;All instructions are 16-bits long.  Some 16-bit instructions are
followed by a 32-bit immediate value.  All of the opcode space not
consumed by the encodings below is filled with the &lt;code&gt;bad&lt;/code&gt; instruction.&lt;/p&gt;
&lt;h2&gt;&lt;table width="100%"&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;and&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00100110AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Logical and.  Performs a logical and operation on the contents of registers &lt;code&gt;$rA&lt;/code&gt; and &lt;code&gt;$rB&lt;/code&gt; and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;add.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00000101AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Add, long.  Adds the contents of registers &lt;code&gt;$rA&lt;/code&gt; and &lt;code&gt;$rB&lt;/code&gt; and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ashl&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00101000AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Arithmetic shift left.  Performs an arithmetic shift left of &lt;code&gt;$rA&lt;/code&gt; byt &lt;code&gt;$rB&lt;/code&gt; bits and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ashr&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00101101AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Arithmetic shift right.  Performs an arithmetic shift right of &lt;code&gt;$rA&lt;/code&gt; byt &lt;code&gt;$rB&lt;/code&gt; bits and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;beq&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;110000vvvvvvvvvv&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Branch if equal.  If the results of the last &lt;code&gt;cmp&lt;/code&gt; demonstrated that &lt;code&gt;$rA&lt;/code&gt; is equal to &lt;code&gt;$rB&lt;/code&gt;, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 to the program counter.  The branch is relative to the start of this instruction.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;bge&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;110110vvvvvvvvvv&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Branch if greater than or equal.  If the results of the last &lt;code&gt;cmp&lt;/code&gt; demonstrated that the signed 32-bit value in &lt;code&gt;$rA&lt;/code&gt; is greater than or equal to the signed 32-bit value in &lt;code&gt;$rB&lt;/code&gt;, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 to the program counter.  The branch is relative to the address of this instruction.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;bgeu&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;111000vvvvvvvvvv&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Branch if greater than or equal, unsigned.  If the results of the last &lt;code&gt;cmp&lt;/code&gt; demonstrated that the unsigned 32-bit value in &lt;code&gt;$rA&lt;/code&gt; is greater than or equal to the unsigned 32-bit value in &lt;code&gt;$rB&lt;/code&gt;, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter.  The branch is relative to the address of this instruction.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;bgt&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;110011vvvvvvvvvv&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Branch if greater than.  If the results of the last &lt;code&gt;cmp&lt;/code&gt; demonstrated that the signed 32-bit value in &lt;code&gt;$rA&lt;/code&gt; is greater than the signed 32-bit value in &lt;code&gt;$rB&lt;/code&gt;, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter.  The branch is relative to the address of this instruction.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;bgtu&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;1100101vvvvvvvvv&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Branch if greater than, unsigned.  If the results of the last &lt;code&gt;cmp&lt;/code&gt; demonstrated that the unsigned 32-bit value in &lt;code&gt;$rA&lt;/code&gt; is greater than the unsigned 32-bit value in &lt;code&gt;$rB&lt;/code&gt;, branch to the address computed by the adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter.  The branch is relative to the address of this instruction.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ble&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;110111vvvvvvvvvv&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Branch if less than or equal.  If the results of the last &lt;code&gt;cmp&lt;/code&gt; demonstrated that the signed 32-bit value in &lt;code&gt;$rA&lt;/code&gt; is less than or equal to the signed 32-bit value in &lt;code&gt;$rB&lt;/code&gt;, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter.  The branch is relative to the address of this instruction.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;bleu&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;111001vvvvvvvvvv&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Branch if less than or equal, unsigned.  If the results of the last &lt;code&gt;cmp&lt;/code&gt; demonstrated that the unsigned 32-bit value in &lt;code&gt;$rA&lt;/code&gt; is less than or equal to the unsigned 32-bit value in &lt;code&gt;$rB&lt;/code&gt;, branch to the address computed by adding the signed 10-bit immediate value to the program counter.  The branch is relative to the address of this instruction.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;blt&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;110010vvvvvvvvvv&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Branch if less than.  If the results of the last &lt;code&gt;cmp&lt;/code&gt; demonstrated that the signed 32-bit value in &lt;code&gt;$rA&lt;/code&gt; is less than the signed 32-bit value in &lt;code&gt;$rB&lt;/code&gt;, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter.  The branch is relative to the address of this instruction.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;bltu&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;110100vvvvvvvvvv&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Branch if less than, unsigned.  If the results of the last &lt;code&gt;cmp&lt;/code&gt; demonstrated that the unsigned 32-bit value in &lt;code&gt;$rA&lt;/code&gt; is less than the unsigned 32-bit value in &lt;code&gt;$rB&lt;/code&gt;, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter.  The branch is relative to the address of this instruction.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;bne&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;110001vvvvvvvvvv&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Branch if not equal.  If the results of the last &lt;code&gt;cmp&lt;/code&gt; demonstrated that &lt;code&gt;$rA&lt;/code&gt; is not equal to &lt;code&gt;$rB&lt;/code&gt;, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter.  The branch is relative to the address of this instruction.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;brk&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00110101xxxxxxxx&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Break.  The software breakpoint instruction.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;cmp&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00001110AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Compare.  Compares the contents of &lt;code&gt;$rA&lt;/code&gt; to &lt;code&gt;$rB&lt;/code&gt; and store the results in the processor's internal condition code register.  This is the only instruction that updates the internal condition code register used by the branch instructions.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;dec&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;1001AAAAiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Decrement.  Decrement register &lt;code&gt;$rA&lt;/code&gt; by the 8-bit value encoded in the 16-bit opcode.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;div.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00110001AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Divide, long.  Divides the signed contents of registers &lt;code&gt;$rA&lt;/code&gt; and &lt;code&gt;$rB&lt;/code&gt; and stores the result in &lt;code&gt;$rA&lt;/code&gt;.  Two special cases are handled here: division by zero asserts an Divide by Zero [[Exceptions|Exception]], and INT_MIN divided by -1 results in INT_MIN.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;gsr&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;1010AAAASSSSSSSS&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Get special register.  Move the contents of the special register S into &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;inc&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;1000AAAAiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Increment.  Increment register &lt;code&gt;$rA&lt;/code&gt; by the 8-bit value encoded in the 16-bit opcode.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;jmp&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00100101AAAAxxxx&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Jump.   Jumps to the 32-bit address stored in &lt;code&gt;$rA&lt;/code&gt;.  This is not a subroutine call, and therefore the stack is not updated.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;jmpa&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00011010xxxxxxxx iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Jump to address.   Jumps to the 32-bit address following the 16-bit opcode.  This is not a subroutine call, and therefore the stack is not updated.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;jsr&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00011001AAAAxxxx&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Jump to subroutine.  Jumps to a subroutine at the address stored in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;jsra&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00000011xxxxxxxx iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Jump to subroutine at absolute address.  Jumps to a subroutine identified by the 32-bit address following the 16-bit opcode.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ld.b&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00011100AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Load byte.  Loads the 8-bit contents stored at the address pointed to by &lt;code&gt;$rB&lt;/code&gt; into &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ld.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00001010AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Load long.  Loads the 32-bit contents stored at the address pointed to by &lt;code&gt;$rB&lt;/code&gt; into &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ld.s&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00010001AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Load short.  Loads the 16-bit contents stored at the address pointed to by &lt;code&gt;$rB&lt;/code&gt; into &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;lda.b&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00011101AAAAxxxx iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Load absolute, byte.  Loads the 8-bit value pointed at by the 32-bit address following the 16-bit opcode into register &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;lda.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00001000AAAAxxxx iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Load absolute, long.  Loads the 32-bit value pointed at by the 32-bit address following the 16-bit opcode into register &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;lda.s&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00010011AAAAxxxx iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Load absolute, short.  Loads the 16-bit value pointed at by the 32-bit address following the 16-bit opcode into register &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ldi.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00000001AAAAxxxx iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Load immediate, long.  Loads the 32-bit immediate following the 16-bit opcode into register %rA.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ldi.b&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00011011AAAAxxxx iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Load immediate, byte.  Loads the 32-bit immediate following the 16-bit opcode into register %rA.  This is a poor encoding, as the 32-bit value really only contains 8-bits of interest.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ldi.s&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00100000AAAAxxxx iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Load immediate, short.  Loads the 32-bit immediate following the 16-bit opcode into register %rA.  This is a poor encoding, as the 32-bit value really only contains 16-bits of interest.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ldo.b&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00110110AAAABBBB iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Load offset, byte.  Loads into &lt;code&gt;$rA&lt;/code&gt; the 8-bit value from memory pointed at by the address produced by adding the 32-bit value following the 16-bit opcode to &lt;code&gt;$rB&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ldo.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00001100AAAABBBB iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Load offset, long.  Loads into &lt;code&gt;$rA&lt;/code&gt; the 32-bit value from memory pointed at by the address produced by adding the 32-bit value following the 16-bit opcode to &lt;code&gt;$rB&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ldo.s&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00111000AAAABBBB iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Load offset, short.  Loads into &lt;code&gt;$rA&lt;/code&gt; the 16-bit value from memory pointed at by the address produced by adding the 32-bit value following the 16-bit opcode to &lt;code&gt;$rB&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;lshr&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00100111AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Logical shift right.  Performs a logical shift right of register &lt;code&gt;$rA&lt;/code&gt; by &lt;code&gt;$rB&lt;/code&gt; bits and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;mod.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00110011AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Modulus, long.  Compute the modulus of the signed contents of registers &lt;code&gt;$rA&lt;/code&gt; and &lt;code&gt;$rB&lt;/code&gt; and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;mov&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00000010AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Move register to register.  Move the contents of &lt;code&gt;$rB&lt;/code&gt; into &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;mul.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00101111AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Multiply, long.  Multiplies the contents of registers &lt;code&gt;$rA&lt;/code&gt; and &lt;code&gt;$rB&lt;/code&gt; and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;neg&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00101010AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Negative.  Changes the sign of &lt;code&gt;$rB&lt;/code&gt; and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00000000xxxxxxxx&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Do nothing.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;not&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00101100AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Logical not.  Performs a logical not operation on the contents of register &lt;code&gt;$rB&lt;/code&gt; and stores the result in register &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;or&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00101011AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Logical or.  Performs a logical or operation on the contents of registers &lt;code&gt;$rA&lt;/code&gt; and &lt;code&gt;$rB&lt;/code&gt; and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00000111AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Pop the 32-bit contents of the top of the stack pointed to by &lt;code&gt;$rB&lt;/code&gt; into &lt;code&gt;$rA&lt;/code&gt; and update the stack pointer.  Stacks grown down.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;push&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00000110AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Push the contents of &lt;code&gt;$rB&lt;/code&gt; onto a stack pointed to by &lt;code&gt;$rA&lt;/code&gt; and update the stack pointer.  Stacks grown down.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ret&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00000100xxxxxxxx&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Return from subroutine.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ssr&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;1011AAAASSSSSSSS&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Set special register.  Move the contents of &lt;code&gt;$rA&lt;/code&gt; into special register S.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;st.b&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00011110AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Store byte.  Stores the 8-bit contents of &lt;code&gt;$rB&lt;/code&gt; into memory at the address pointed to by &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;st.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00001011AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Store long.  Stores the 32-bit contents of &lt;code&gt;$rB&lt;/code&gt; into memory at the address pointed to by &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;st.s&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00100011AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Store short.  Stores the 16-bit contents of &lt;code&gt;$rB&lt;/code&gt; into memory at the address pointed to by &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;sta.b&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00011111AAAAxxxx iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Store absolute, byte.  Stores the lower 8-bit contents of &lt;code&gt;$rA&lt;/code&gt; into memory at the 32-bit address following the 16-bit opcode.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;sta.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00001001AAAAxxxx iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Store absolute, long.  Stores the full 32-bit contents of &lt;code&gt;$rA&lt;/code&gt; into memory at the 32-bit address following the 16-bit opcode.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;sta.s&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00100100AAAAxxxx iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Store absolute, short.  Stores the lower 16-bit contents of &lt;code&gt;$rA&lt;/code&gt; into memory at the 32-bit address following the 16-bit opcode.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;sto.b&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00110111AAAABBBB iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Store offset, byte.  Stores the 8-bit contents of &lt;code&gt;$rB&lt;/code&gt; into memory at the address roduced by adding the 32-bit value following the 16-bit opcode to &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;sto.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00001101AAAABBBB iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Store offset, long.  Stores the 32-bit contents of &lt;code&gt;$rB&lt;/code&gt; into memory at the address roduced by adding the 32-bit value following the 16-bit opcode to &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;sto.s&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00111001AAAABBBB iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Store offset, short.  Stores the 16-bit contents of &lt;code&gt;$rB&lt;/code&gt; into memory at the address roduced by adding the 32-bit value following the 16-bit opcode to &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;sub.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00101001AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Subtract, long.  Subtracts the contents of registers &lt;code&gt;$rA&lt;/code&gt; and &lt;code&gt;$rB&lt;/code&gt; and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;swi&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00110000xxxxxxxx iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Software interrupt.  Trigger a software interrupt, where the interrupt type is encoded in the 32-bits following the 16-bit opcode.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;udiv.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00110010AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Divide unsigned, long.  Divides the unsigned contents of registers &lt;code&gt;$rA&lt;/code&gt; and &lt;code&gt;$rB&lt;/code&gt; and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;umod.l&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00110100AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Modulus unsigned, long.  Compute the modulus of the unsigned contents of registers &lt;code&gt;$rA&lt;/code&gt; and &lt;code&gt;$rB&lt;/code&gt; and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;table width='100%'&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;xor&lt;/code&gt;&lt;/td&gt;&lt;td align='right'&gt;&lt;code&gt;00101110AAAABBBB&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;Logical exclusive or.  Performs a logical exclusive or operation on the contents of registers &lt;code&gt;$rA&lt;/code&gt; and &lt;code&gt;$rB&lt;/code&gt; and stores the result in &lt;code&gt;$rA&lt;/code&gt;.&lt;/p&gt;</summary></entry></feed>